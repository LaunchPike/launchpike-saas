---
const PUBLIC_BASE_URL = import.meta.env.PUBLIC_BASE_URL || "";

const logos = [
  { src: `${PUBLIC_BASE_URL}/logos/Lemon.png`, alt: "Lemon Squeezy", link: "https://www.lemonsqueezy.com" },
  { src: `${PUBLIC_BASE_URL}/logos/Logo_Google_Analytics.png`, alt: "Google Analytics", link: "https://analytics.google.com" },
  { src: `${PUBLIC_BASE_URL}/logos/nodejs-logo-svgrepo-com.png`, alt: "Node.js", link: "https://nodejs.org" },
  { src: `${PUBLIC_BASE_URL}/logos/plausible_logo.png`, alt: "Plausible", link: "https://plausible.io" },
  { src: `${PUBLIC_BASE_URL}/logos/Stripe_Logo,_revised_2016.png`, alt: "Stripe", link: "https://stripe.com" },
  { src: `${PUBLIC_BASE_URL}/logos/astro.png`, alt: "Astro", link: "https://astro.build/" },
  { src: `${PUBLIC_BASE_URL}/logos/chatgpt.png`, alt: "ChatGPT", link: "https://chatgpt.com/" },
  { src: `${PUBLIC_BASE_URL}/logos/SVG.png`, alt: "SVG", link: "#" },
  { src: `${PUBLIC_BASE_URL}/logos/Tailwind_CSS_Logo.png`, alt: "Tailwind CSS", link: "https://tailwindcss.com" },
  { src: `${PUBLIC_BASE_URL}/logos/unibee.png`, alt: "Unibee", link: "https://unibee.dev/" },
];

const duplicatedLogos = [...logos, ...logos];
---

<section class="sm-no-py py-0 lg:py-10 flex flex-col gap-10">
  <div class="logos-container relative overflow-x-hidden">
    <div
      class="logos-track flex flex-row items-center gap-15"
      data-count={logos.length}
      aria-label="Technology logos marquee"
    >
      {
        duplicatedLogos.map((logo) => (
          <a
            class="logo-item min-w-[100px] lg:min-w-[50px] w-fit flex-shrink-0"
            target="_blank"
            href={logo.link}
          >
            <img
              src={logo.src}
              alt={logo.alt}
              class="h-16 lg:h-12 px-1 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition duration-300"
              loading="lazy"
            />
          </a>
        ))
      }
    </div>
  </div>
</section>

<style>
  /* Общие */
  .logos-container {
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .logos-container::-webkit-scrollbar { display: none; }

  .logos-track { width: fit-content; }
  .logos-track.wrap { flex-wrap: wrap; justify-content: space-around; }
  .logos-track.nowrap { flex-wrap: nowrap; }

  /* Маркировка для состояния "маркиза" */
  .logos-track.marquee {
    animation-name: scroll-logos;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    /* длительность задаём из JS через inline-style */
    will-change: transform;
  }
  .logos-track.marquee:hover { animation-play-state: paused; }

  /* Ключевые кадры — прокрутка на полную ширину первой половины */
  @keyframes scroll-logos {
    from { transform: translateX(0); }
    to   { transform: translateX(calc(-1 * var(--marquee-distance, 50%))); }
  }

  /* Мобильные — всегда маркиза */
  @media (max-width: 1023px) {
    .logos-track { gap: 3.75rem; } /* соответствие Tailwind gap-15 */
  }

  /* Десктоп — по умолчанию без прокрутки, с wrap */
  @media (min-width: 1024px) {
    .logos-track { gap: 3.75rem; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.logos-container');
    const track = document.querySelector('.logos-track');
    if (!container || !track) return;

    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const totalCount = Number(track.dataset.count || '0');
    const items = Array.from(track.querySelectorAll('.logo-item'));

    // Скрыть дубликаты, если маркиза не нужна
    function hideDuplicates() {
      items.forEach((el, i) => {
        el.style.display = (i >= totalCount) ? 'none' : '';
      });
    }
    function showDuplicates() {
      items.forEach((el) => { el.style.display = ''; });
    }

    // Получаем реальный gap между элементами (в пикселях)
    function getGapPx() {
      const cs = getComputedStyle(track);
      const gap = cs.columnGap || cs.gap || '0px';
      return parseFloat(gap) || 0;
    }

    // Суммарная ширина первой половины (нативных логотипов), включая gap
    function firstBatchWidth() {
      const gap = getGapPx();
      let sum = 0;
      for (let i = 0; i < Math.min(totalCount, items.length); i++) {
        const rect = items[i].getBoundingClientRect();
        sum += rect.width;
      }
      // Добавим промежутки между N элементами: (N - 1) * gap
      if (totalCount > 1) sum += (totalCount - 1) * gap;
      return sum;
    }

    // Проверка: нужен ли автоскролл
    function needsMarquee() {
      // Если элементы переносятся на новую строку — тоже включаем маркизу
      const firstTop = items[0]?.offsetTop ?? 0;
      const wraps = items.slice(1, totalCount).some(el => el.offsetTop !== firstTop);

      // Ширина "первой половины" больше контейнера — нужен скролл
      const overflow = firstBatchWidth() > container.clientWidth;

      return wraps || overflow;
    }

    // Включаем/выключаем маркизу
    function enableMarquee() {
      showDuplicates();
      track.classList.remove('wrap');
      track.classList.add('nowrap', 'marquee');

      // Расстояние прокрутки = ширина первой половины
      const distance = firstBatchWidth();
      track.style.setProperty('--marquee-distance', distance + 'px');

      // Длительность: чем больше расстояние, тем дольше. Около 80px/сек.
      const duration = Math.max(18, Math.round(distance / 80));
      track.style.animationDuration = duration + 's';

      // Пауза при touch
      const pause = () => track.style.animationPlayState = 'paused';
      const run = () => track.style.animationPlayState = 'running';
      track.addEventListener('mouseenter', pause);
      track.addEventListener('mouseleave', run);
      track.addEventListener('touchstart', pause, { passive: true });
      track.addEventListener('touchend', run);
    }

    function disableMarquee() {
      track.classList.remove('marquee', 'nowrap');
      track.classList.add('wrap');
      track.style.animationDuration = '';
      track.style.removeProperty('--marquee-distance');
      track.style.transform = 'none';
      hideDuplicates();
    }

    function applyMode() {
      // На мобильных — всегда маркиза (если не reduce)
      if (window.innerWidth < 1024) {
        if (prefersReduced) {
          disableMarquee();
        } else {
          enableMarquee();
        }
        return;
      }

      // Десктоп: включаем маркизу только при нехватке ширины или переносе
      if (!prefersReduced && needsMarquee()) {
        enableMarquee();
      } else {
        disableMarquee();
      }
    }

    // При первом рендере DOM размеры ещё “сырые” — дадим один кадр.
    requestAnimationFrame(() => {
      applyMode();
    });

    // Пересчёт при resize/внутренних изменениях
    const ro = new ResizeObserver(() => applyMode());
    ro.observe(container);
    ro.observe(track);
    window.addEventListener('resize', applyMode);
  });
</script>
