---
import SetupScroll from "./setup-steps/SetupSteps.jsx";

---

<SetupScroll client:load />

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container: HTMLElement | null = document.querySelector('[data-scroll-container]');
    const slidesContainer: HTMLElement | null = document.querySelector('[data-slides-container]');
    const progressBar: HTMLElement | null = document.querySelector('[data-progress-bar]');
    
    if (!container || !slidesContainer) return;
    
    if (progressBar) {
      progressBar.style.transition = 'background 0.24s ease-out';
    }
    
    slidesContainer.style.transition = 'transform 0.18s ease-out';
    
    const TIMELINE_WIDTH: number = 90 * 120; // Изменено с 150 на 120
    const maxTranslateX: number = -(TIMELINE_WIDTH - window.innerWidth * 0.8);
    
    const centerOffset: number = window.innerWidth / 2 - 200;
    const startPosition: number = centerOffset;
    const endPosition: number = maxTranslateX - centerOffset;
    
    function handleScroll(): void {
      if (!container || !slidesContainer) return;
      
      const rect: DOMRect = container.getBoundingClientRect();
      const windowHeight: number = window.innerHeight;
      const containerHeight: number = container.offsetHeight;
      
      const startPoint: number = windowHeight;
      const endPoint: number = -containerHeight;
      const totalDistance: number = startPoint - endPoint;
      
      const currentPosition: number = rect.top;
      const rawProgress: number = Math.max(0, Math.min(1, (startPoint - currentPosition) / totalDistance));
      
      const pauseStart: number = 0.15;
      const animationPhase: number = 0.70;
      
      let translateX: number;
      let progressBarProgress: number;
      
      if (rawProgress < pauseStart) {
        translateX = startPosition;
        progressBarProgress = 0;
      } else if (rawProgress < (pauseStart + animationPhase)) {
        const phaseProgress: number = (rawProgress - pauseStart) / animationPhase;
        const smoothProgress: number = easeInOutCubic(phaseProgress);
        translateX = startPosition + (smoothProgress * (endPosition - startPosition));
        progressBarProgress = smoothProgress;
      } else {
        translateX = endPosition;
        progressBarProgress = 1;
      }
      
      slidesContainer.style.transform = `translateX(${translateX}px)`;
      
      if (progressBar) {
        const progressPercent: number = progressBarProgress * 100;
        progressBar.style.background = `linear-gradient(to right, #3B82F6 ${progressPercent}%, #D1D5DB ${progressPercent}%)`;
      }
    }
    
    function easeInOutCubic(t: number): number {
      return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
    }
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll();
  });
</script>