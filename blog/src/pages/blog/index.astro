---
import { getCollection } from "astro:content";
import "./blog.css";
import LandingLayout from "../../layouts/LandingLayout.astro";
import { dotBgStyle } from "../../scripts/dotBg";

const posts = (await getCollection("blog"))
    .filter((p) => !p.data.draft)
    .sort(
        (a, b) =>
            new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
    );

const tags = Array.from(
    new Set(posts.flatMap((p) => p.data.tags ?? [])),
).sort();
---

<LandingLayout
    title="Launchpike"
    description="Plan, validate, and ship product launches with fewer surprises."
    style={dotBgStyle({
        gapX: 69,
        gapY: 69,
        dotColor: "rgba(0,0,0,0.5)",
        bgColor: "transparent",
    })}
>
    <main class="w-full py-26">
        <h1 class="text-center text-5xl">Blog</h1>
        <p class="text-center lede">Read our latest news, updates & launch guides</p>

        <div class="toolbar w-full flex justify-center">
            <div class="flex search w-fit">
                <input id="q" type="search" placeholder="Search" />
            </div>
            <div class="tags flex w-full justify-center" id="tags">
                {
                    tags.map((t) => (
                        <button class="tag" data-tag={t}>
                            {t}
                        </button>
                    ))
                }
            </div>
        </div>

        <section class="grid" id="grid">
            {
                posts.map((p) => (
                    <article
                        class="card"
                        data-title={p.data.title.toLowerCase()}
                        data-tags={(p.data.tags ?? []).join("|").toLowerCase()}
                    >
                        <a href={`/blog/${p.slug}/`}>
                            {p.data.cover ? (
                                <img class="thumb" src={p.data.cover} alt="" />
                            ) : (
                                <div class="thumb" />
                            )}
                        </a>
                        <div class="card-body">
                            <div class="date">
                                {new Date(p.data.date).toLocaleDateString()}
                            </div>
                            <h3>
                                <a href={`/blog/${p.slug}/`}>{p.data.title}</a>
                            </h3>
                            {p.data.description && <p>{p.data.description}</p>}
                            <div class="chips gap-2">
                                {(p.data.tags ?? []).map((t) => (
                                    <span class="chip">{t}</span>
                                ))}
                            </div>
                        </div>
                    </article>
                ))
            }
        </section>
    </main>
</LandingLayout>

<script is:inline>
    const q = document.getElementById("q");
    const grid = document.getElementById("grid");
    const cards = Array.from(grid.children);
    const tags = Array.from(document.querySelectorAll("#tags .tag"));
    let activeTag = "";

    function apply() {
        const query = (q.value || "").toLowerCase().trim();
        cards.forEach((card) => {
            const title = card.dataset.title || "";
            const tags = card.dataset.tags || "";
            const byQ = !query || title.includes(query);
            const byT = !activeTag || tags.includes(activeTag.toLowerCase());
            card.classList.toggle("hidden", !(byQ && byT));
        });
    }
    q.addEventListener("input", apply);
    tags.forEach((btn) =>
        btn.addEventListener("click", () => {
            tags.forEach((b) => b.classList.remove("active"));
            if (activeTag === btn.dataset.tag) {
                activeTag = "";
            } else {
                activeTag = btn.dataset.tag || "";
                btn.classList.add("active");
            }
            apply();
        }),
    );
</script>
