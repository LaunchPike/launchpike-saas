name: Build and Deploy API Server
on:
  push:
    branches:
    - main
  workflow_dispatch:

env:
  IMAGE_NAME: launchpike-saas-api

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Wasp CLI
        run: |
          curl -sSL https://get.wasp.sh/installer.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install packages and Build
        run: npm install --prefix ./app

      - name: Build with Wasp
        working-directory: ./app
        run: wasp build
        # Produces app/.wasp/build with Dockerfile for the server.

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract image metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest

      # Build and push backend Docker image to ghcr.io
      - name: Build and push backend Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
          docker build -t $IMAGE_NAME:${{ github.sha }} ${{ steps.meta.outputs.tags }} -f ./app/.wasp/build/Dockerfile ./app/.wasp/build
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker push $IMAGE_NAME:${{ github.sha }}

      # SSH to server, pull the latest backend Docker image, and run it
      - name: Deploy backend container on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE_NAME=ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
            TAG=${{ github.sha }}
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            docker pull $IMAGE_NAME:$TAG || (sleep 3 && docker pull $IMAGE_NAME:$TAG)
            docker rm -f ${{ env.IMAGE_NAME}} || true
            docker run -d --name ${{ env.IMAGE_NAME}} --restart unless-stopped \
              -p :3001:3001 \
              -e NODE_ENV=production \
              $IMAGE_NAME:$TAG
